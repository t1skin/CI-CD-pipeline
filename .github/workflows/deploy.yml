name: Deploy app

on:
  push:
    branches: 
      - main
      - dev
      - release
      - preprod

jobs:

  run-tests:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Setup test environment
        run: |
          touch .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "CERT_NAME=release" >> .env
          mkdir pg-certs
          cd pg-certs
          echo "${{ secrets.PG_CERT }}" > release.crt

      - name: Run tests
        run: npm test


  deploy-production:
    runs-on: [self-hosted, production]
    if: github.ref == 'refs/heads/main'
    needs: run-tests
    environment: production

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Set environment name
      run:
        echo "ENVIRONMENT=production" >> $GITHUB_ENV
      shell: bash

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Setup environment
      run: |
        touch .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
        echo "CERT_NAME=${{ env.ENVIRONMENT }}" >> .env
        mkdir pg-certs
        cd pg-certs
        echo "${{ secrets.PG_CERT }}" > ${{ env.ENVIRONMENT }}.crt

    - name: Build project
      run: npm run build

    - name: Copy cert files
      run: |
            mkdir -p dist/pg-certs
            cp -r ./pg-certs/* ./dist/pg-certs/

  deploy-preproduction:
    runs-on: [self-hosted, preproduction]
    if: github.ref == 'refs/heads/preprod'
    needs: run-tests
    environment: preproduction

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Set environment name
      run:
        echo "ENVIRONMENT=preproduction" >> $GITHUB_ENV
      shell: bash

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Setup environment
      run: |
        touch .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
        echo "CERT_NAME=${{ env.ENVIRONMENT }}" >> .env
        mkdir pg-certs
        cd pg-certs
        echo "${{ secrets.PG_CERT }}" > ${{ env.ENVIRONMENT }}.crt

    - name: Build project
      run: npm run build

    - name: Copy cert files
      run: |
            mkdir -p dist/pg-certs
            cp -r ./pg-certs/* ./dist/pg-certs/

  deploy-release:
    runs-on: [self-hosted, release]
    if: github.ref == 'refs/heads/release'
    needs: run-tests
    environment: release

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Set environment name
      run:
        echo "ENVIRONMENT=release" >> $GITHUB_ENV
      shell: bash

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Setup environment
      run: |
        touch .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
        echo "CERT_NAME=${{ env.ENVIRONMENT }}" >> .env
        mkdir pg-certs
        cd pg-certs
        echo "${{ secrets.PG_CERT }}" > ${{ env.ENVIRONMENT }}.crt

    - name: Build project
      run: npm run build
    
    - name: Copy cert files
      run: |
            mkdir -p dist/pg-certs
            cp -r ./pg-certs/* ./dist/pg-certs/

  deploy-development:
    runs-on: [self-hosted, development]
    if: github.ref == 'refs/heads/dev'
    needs: run-tests
    environment: development

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Set environment name
      run:
        echo "ENVIRONMENT=development" >> $GITHUB_ENV
      shell: bash

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci

    - name: Setup environment
      run: |
        touch .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
        echo "CERT_NAME=${{ env.ENVIRONMENT }}" >> .env
        mkdir pg-certs
        cd pg-certs
        echo "${{ secrets.PG_CERT }}" > ${{ env.ENVIRONMENT }}.crt

    - name: Build project
      run: npm run build

    - name: Copy cert files
      run: |
            mkdir -p dist/pg-certs
            cp -r ./pg-certs/* ./dist/pg-certs/
